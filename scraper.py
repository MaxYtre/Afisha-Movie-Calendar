#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Afisha.ru –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
- –¢–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å –ê—Ñ–∏—à–∏.ru
- –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
- –†–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å–µ–∞–Ω—Å–æ–≤
- –ë–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤
"""

import requests
from bs4 import BeautifulSoup
from ics import Calendar, Event
from datetime import datetime, timedelta, date
import re
import json
import os
import time
import random
from urllib.parse import urljoin, quote, urlparse, parse_qs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–∞
MAX_MOVIES     = 3  # None for unlimited or int limit
MAX_RETRIES    = 8
BACKOFF_FACTOR = 2
BASE_DELAY     = 3  # seconds  # seconds
RANDOM_DELAY   = 2  # seconds  # seconds
PAGE_DELAY     = 4  # seconds
MAX_RETRIES    = 8
BASE_DELAY     = 3  # seconds  # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
RANDOM_DELAY   = 2  # seconds  # —Å–ª—É—á–∞–π–Ω–∞—è –¥–æ–±–∞–≤–∫–∞ –∫ –∑–∞–¥–µ—Ä–∂–∫–µ
PAGE_DELAY = 2  # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏

def safe_delay():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º"""
    delay = BASE_DELAY + random.uniform(0, RANDOM_DELAY)
    time.sleep(delay)

def parse_date_from_movie_page(soup):
    """–ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–≤—É—é –¥–∞—Ç—É —Å–µ–∞–Ω—Å–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞"""
    try:
        # –ú–µ—Å—è—Ü: class="v7qKY"
        month_element = soup.find(class_="v7qKY")
        # –î–∞—Ç–∞: class="YCVqY"  
        date_element = soup.find(class_="YCVqY")

        if month_element and date_element:
            month_text = month_element.get_text(strip=True).lower()
            date_text = date_element.get_text(strip=True)

            # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
            months_map = {
                '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6,
                '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12,
                '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
                '–∏—é–ª': 7, '–∞–≤–≥': 8, '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
            }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–∞—Ç—ã
            day_match = re.search(r'\d+', date_text)
            if day_match:
                day = int(day_match.group())

                # –ò—â–µ–º –º–µ—Å—è—Ü
                for month_name, month_num in months_map.items():
                    if month_name in month_text:
                        try:
                            current_year = date.today().year
                            event_date = date(current_year, month_num, day)

                            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                            if event_date < date.today():
                                event_date = date(current_year + 1, month_num, day)

                            return event_date
                        except ValueError:
                            continue

        # Fallback - –∑–∞–≤—Ç—Ä–∞
        return date.today() + timedelta(days=1)

    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        return date.today() + timedelta(days=1)

def safe_request(session, url, max_retries=MAX_RETRIES):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            print(f"   üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {url}")

            response = session.get(url, timeout=30)
            response.raise_for_status()

            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return response

        except Exception as e:
            print(f"   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")

            if attempt < max_retries - 1:
                retry_delay = (attempt + 1) * 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                print(f"   ‚è∞ –ñ–¥–µ–º {retry_delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                time.sleep(retry_delay)
            else:
                print(f"   üíî –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")

    return None

def parse_movie_details_simplified(movie_url, session, movie_title):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    try:
        print(f"   üîç –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞: {movie_title}")

        response = safe_request(session, movie_url)
        if not response:
            return {}

        soup = BeautifulSoup(response.text, 'html.parser')
        details = {}

        # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞
        event_date = parse_date_from_movie_page(soup)
        details['event_date'] = event_date
        print(f"   üìÖ –î–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞: {event_date.strftime('%d.%m.%Y')}")

        # –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: class="GwglV"
        country_element = soup.find(class_="GwglV")
        if country_element:
            country = country_element.get_text(strip=True)
            details['country'] = country
            print(f"   üåç –°—Ç—Ä–∞–Ω–∞: {country}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ñ–∏–ª—å–º—ã
            if country.lower() in ['—Ä–æ—Å—Å–∏—è', 'russia']:
                print(f"   üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú: —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–∏–ª—å–º")
                details['ignore_russian'] = True
                return details

        # –ñ–∞–Ω—Ä: class="CjnHd y8A5E"
        genre_elements = soup.find_all(class_="CjnHd y8A5E")
        if genre_elements:
            details['genre'] = genre_elements[0].get_text(strip=True)
            print(f"   üé≠ –ñ–∞–Ω—Ä: {details['genre']}")

        # –û —Ñ–∏–ª—å–º–µ: class="aEVDY WEIGb t1V2l"
        description_element = soup.find(class_="aEVDY WEIGb t1V2l")
        if description_element:
            details['description'] = description_element.get_text(strip=True)
            print(f"   üìñ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {len(details['description'])} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("   ‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü–æ—Å—Ç–µ—Ä: class="PwMBX rmwkz"
        poster_element = soup.find(class_="PwMBX rmwkz")
        if poster_element:
            if poster_element.name == 'img' and poster_element.get('src'):
                details['poster'] = urljoin(movie_url, poster_element['src'])
            else:
                img = poster_element.find('img', src=True)
                if img:
                    details['poster'] = urljoin(movie_url, img['src'])

            if details.get('poster'):
                print(f"   üñºÔ∏è –ü–æ—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: {details['poster']}")
            else:
                print("   ‚ö†Ô∏è –ü–æ—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("   ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –£–ë–†–ê–ù–û: –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ IMDB –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥ –ê—Ñ–∏—à–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–∞—Ä—Å–∏—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π
        safe_delay()

        return details

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
        return {}

def parse_afisha_page_simplified(page_url, session):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—Ñ–∏—à–∏"""
    movies = []
    ignored_count = 0

    try:
        print(f"\nüì° –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")

        response = safe_request(session, page_url)
        if not response:
            return []

        soup = BeautifulSoup(response.text, 'html.parser')
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ò—â–µ–º —Ñ–∏–ª—å–º—ã
        movie_elements = soup.find_all(class_="CjnHd y8A5E nbCNS yknrM")
        print(f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(movie_elements)} —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        for i, movie_element in enumerate(movie_elements):
            try:
                print(f"\n   üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å–º {i+1}/{len(movie_elements)}")

                # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞
                title = movie_element.get_text(strip=True)
                movie_url = None

                if movie_element.name == 'a' and movie_element.get('href'):
                    movie_url = urljoin(page_url, movie_element['href'])
                else:
                    parent = movie_element.find_parent('a', href=True)
                    if parent:
                        movie_url = urljoin(page_url, parent['href'])

                if not title or not movie_url:
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫–∏")
                    continue

                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                print(f"   üîó –°—Å—ã–ª–∫–∞: {movie_url}")

                # –†–µ–π—Ç–∏–Ω–≥ –ê—Ñ–∏—à–∏ –∏ –≥–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                afisha_rating = None
                year = None
                container = movie_element.find_parent()

                if container:
                    rating_element = container.find(class_="IrSqF zPI3b BNjPz k96pX")
                    if rating_element:
                        afisha_rating = rating_element.get_text(strip=True)
                        print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ê—Ñ–∏—à–∏: {afisha_rating}")

                    year_element = container.find(class_="S_wwn")
                    if year_element:
                        year = year_element.get_text(strip=True)
                        print(f"   üìÖ –ì–æ–¥: {year}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤)
                details = parse_movie_details_simplified(movie_url, session, title)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ñ–∏–ª—å–º—ã
                if details.get('ignore_russian'):
                    ignored_count += 1
                    print(f"   üö´ –ü–†–û–ü–£–©–ï–ù: —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–∏–ª—å–º")
                    continue

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å–º–∞
                movie_data = {
                    'title': title,
                    'date': details.get('event_date', date.today() + timedelta(days=len(movies) + 1)),
                    'source': 'Afisha.ru',
                    'confidence': 1.0,
                    'direct_url': movie_url,
                    'found_text': title,
                    'afisha_rating': afisha_rating,  # –¢–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥ –ê—Ñ–∏—à–∏
                    'year': year,
                    'country': details.get('country'),
                    'genre': details.get('genre'),
                    'description': details.get('description', f"–§–∏–ª—å–º '{title}' –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö –ü–µ—Ä–º–∏."),
                    'poster': details.get('poster')
                    # –£–ë–†–ê–ù–û: imdb_rating, kinopoisk_rating
                }

                movies.append(movie_data)
                print(f"   ‚úÖ –î–û–ë–ê–í–õ–ï–ù –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∏–ª—å–º–∞–º–∏
                print(f"   ‚è∞ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∏–ª—å–º–æ–º...")
                safe_delay()

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å–º–∞ {i+1}: {e}")
                continue

        print(f"\nüìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(movies)}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {ignored_count}")
        return movies

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return []

def get_all_afisha_pages_simplified():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    print("üé¨ –£–ü–†–û–©–ï–ù–ù–´–ô –ü–ê–†–°–ï–† AFISHA.RU")
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏: 1-2—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("‚≠ê –¢–û–õ–¨–ö–û —Ä–µ–π—Ç–∏–Ω–≥ –ê—Ñ–∏—à–∏ (–ë–ï–ó IMDB/–ö–∏–Ω–æ–ø–æ–∏—Å–∫)")
    print("üìÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å–µ–∞–Ω—Å–æ–≤")
    print("üö´ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤")

    all_movies = []

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'DNT': '1',
        'Upgrade-Insecure-Requests': '1'
    })

    base_url = "https://www.afisha.ru/prm/schedule_cinema"

    try:
        # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_1_movies = parse_afisha_page_simplified(base_url, session)
        all_movies.extend(page_1_movies)

        print(f"\nüìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –Ω–∞–π–¥–µ–Ω–æ {len(page_1_movies)} —Ñ–∏–ª—å–º–æ–≤")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        print(f"‚è∞ –ü–∞—É–∑–∞ {PAGE_DELAY}—Å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏...")
        time.sleep(PAGE_DELAY)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_num = 2
        max_pages = 5

        while page_num <= max_pages:
            page_url = f"{base_url}/page{page_num}/"

            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            try:
                response = session.head(page_url, timeout=30)
                if response.status_code != 200:
                    print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    break
            except:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}")
                break

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_movies = parse_afisha_page_simplified(page_url, session)

            if not page_movies:
                print(f"‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤")
                break

            all_movies.extend(page_movies)
            print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –Ω–∞–π–¥–µ–Ω–æ {len(page_movies)} —Ñ–∏–ª—å–º–æ–≤")

            page_num += 1

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            if page_num <= max_pages:
                print(f"‚è∞ –ü–∞—É–∑–∞ {PAGE_DELAY}—Å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏...")
                time.sleep(PAGE_DELAY)

        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_movies)} —Ñ–∏–ª—å–º–æ–≤")

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with_description = len([m for m in all_movies if m.get('description') and len(m['description']) > 50])
        with_poster = len([m for m in all_movies if m.get('poster')])
        with_afisha_rating = len([m for m in all_movies if m.get('afisha_rating')])

        print("\nüìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üìñ –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: {with_description}/{len(all_movies)}")
        print(f"   üñºÔ∏è –° –ø–æ—Å—Ç–µ—Ä–æ–º: {with_poster}/{len(all_movies)}")
        print(f"   ‚≠ê –° —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ê—Ñ–∏—à–∏: {with_afisha_rating}/{len(all_movies)}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    return all_movies

def create_simplified_calendar(movies_list):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    calendar = Calendar()
    calendar.creator = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –ü–µ—Ä–º–∏"

    print(f"\nüìÖ –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ {len(movies_list)} —Ñ–∏–ª—å–º–æ–≤...")

    for movie in movies_list:
        event = Event()
        event.name = f"üé¨ {movie['title']}"
        event.begin = movie['date']
        event.make_all_day()

        description_lines = []

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤)
        info_parts = []
        if movie.get('afisha_rating'):
            info_parts.append(f"–†–µ–π—Ç–∏–Ω–≥: {movie['afisha_rating']}")
        if movie.get('year'):
            info_parts.append(f"–ì–æ–¥: {movie['year']}")
        if movie.get('country'):
            info_parts.append(f"–°—Ç—Ä–∞–Ω–∞: {movie['country']}")
        if movie.get('genre'):
            info_parts.append(f"–ñ–∞–Ω—Ä: {movie['genre']}")

        if info_parts:
            description_lines.extend([
                "‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:",
                f"{' | '.join(info_parts)}",
                ""
            ])

        # –ü–æ—Å—Ç–µ—Ä
        if movie.get('poster'):
            description_lines.extend([
                "üñºÔ∏è –ü–û–°–¢–ï–†:",
                f"   {movie['poster']}",
                ""
            ])

        # –û–ø–∏—Å–∞–Ω–∏–µ
        if movie.get('description'):
            description_lines.extend([
                "üìñ –û–ü–ò–°–ê–ù–ò–ï:",
                f"{movie['description']}",
                ""
            ])

        # –°—Å—ã–ª–∫–∞
        if movie.get('direct_url'):
            description_lines.extend([
                "üé´ –°–¢–†–ê–ù–ò–¶–ê –§–ò–õ–¨–ú–ê:",
                f"üëâ {movie['direct_url']}"
            ])

        event.description = "\n".join(description_lines)
        calendar.events.add(event)

    return calendar

def remove_duplicates(movies_list):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã"""
    if not movies_list:
        return []

    print(f"\nüîÑ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ {len(movies_list)} —Ñ–∏–ª—å–º–æ–≤...")

    seen_titles = set()
    unique_movies = []

    for movie in movies_list:
        title = movie['title'].lower().strip()
        if title not in seen_titles:
            seen_titles.add(title)
            unique_movies.append(movie)
        else:
            print(f"   üóëÔ∏è –î—É–±–ª–∏–∫–∞—Ç: {movie['title']}")

    return unique_movies

def save_calendar(calendar, filename='perm-cinema.ics'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.writelines(calendar.serialize())
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def main():
    print("üé¨ –£–ü–†–û–©–ï–ù–ù–´–ô –ü–ê–†–°–ï–† AFISHA.RU")
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    print("‚≠ê –¢–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥ –ê—Ñ–∏—à–∏ (–Ω–∞–¥–µ–∂–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ)")
    print("üìÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å–µ–∞–Ω—Å–æ–≤")
    print("üö´ –ë–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤")
    print("üöÄ –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")

    start_time = time.time()

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å–º—ã
    all_movies = get_all_afisha_pages_simplified()

    if not all_movies:
        print("‚ö†Ô∏è –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_movies = remove_duplicates(all_movies)

    if not unique_movies:
        print("‚ö†Ô∏è –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar = create_simplified_calendar(unique_movies)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if save_calendar(calendar):
        elapsed = int(time.time() - start_time)

        print(f"\n‚úÖ –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed//60}–º {elapsed%60}—Å")
        print(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–∑–¥–∞–Ω —Å {len(calendar.events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
        print(f"üé¨ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {len(unique_movies)}")
        print(f"‚ö° –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥")

    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è")

if __name__ == "__main__":
    main()
